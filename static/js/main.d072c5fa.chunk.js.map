{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["getImageNameFromUrl","imgUrl","imageNameWithFormat","substring","lastIndexOf","length","Carousel","_ref","images","itemWidth","frameSize","step","animationDuration","infinite","orderIndex","setOrderIndex","useState","position","totalWidth","visibleWidth","maxShiftOrderIndex","carouselWidth","prev","isDisabledNext","isDisabledPrev","_jsxs","className","style","width","transition","concat","children","_jsx","transform","map","img","src","height","alt","Math","random","toFixed","slice","type","onClick","handlePrev","currOrder","i","disabled","handleNext","defaultValues","App","React","Component","constructor","arguments","state","handleChange","event","name","target","this","setState","value","render","method","action","htmlFor","id","min","onChange","max","checked","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d072c5fa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\nfunction getImageNameFromUrl(imgUrl: string): string {\n  const imageNameWithFormat = imgUrl.substring(imgUrl.lastIndexOf('/') + 1);\n  const imageNameWithoutFormat = imageNameWithFormat\n    .substring(0, imageNameWithFormat.length - 4);\n\n  return imageNameWithoutFormat;\n}\n\nfunction getRandomId():number {\n  return +Math.random().toFixed(12).slice(2);\n}\n\ntype Props = {\n  images: string[],\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n}) => {\n  const [orderIndex, setOrderIndex] = useState(0);\n  const position = orderIndex * itemWidth;\n\n  const totalWidth = itemWidth * images.length;\n  const visibleWidth = itemWidth * frameSize;\n\n  const maxShiftOrderIndex = images.length - frameSize;\n  const carouselWidth = visibleWidth;\n\n  const handleNext = () => {\n    setOrderIndex(prev => {\n      let currOrder = prev;\n\n      for (let i = 0; i < step; i += 1) {\n        if (infinite && currOrder === maxShiftOrderIndex && i === 0) {\n          currOrder = 0;\n          break;\n        }\n\n        if (currOrder < maxShiftOrderIndex) {\n          currOrder += 1;\n        }\n      }\n\n      return currOrder;\n    });\n  };\n\n  const handlePrev = () => {\n    setOrderIndex(prev => {\n      let currOrder = prev;\n\n      for (let i = 0; i < step; i += 1) {\n        if (infinite && currOrder === 0 && i === 0) {\n          currOrder = maxShiftOrderIndex;\n          break;\n        }\n\n        if (currOrder > 0) {\n          currOrder -= 1;\n        }\n      }\n\n      return currOrder;\n    });\n  };\n\n  if (visibleWidth + position > totalWidth) {\n    setOrderIndex(prev => prev - 1);\n  }\n\n  const isDisabledNext = orderIndex >= maxShiftOrderIndex && !infinite;\n  const isDisabledPrev = orderIndex <= 0 && !infinite;\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: carouselWidth,\n        transition: `width ${animationDuration}ms`,\n      }}\n    >\n      <div className=\"container\">\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: totalWidth,\n            transform: `translate(${-position}px)`,\n            transition: `transform ${animationDuration}ms`,\n          }}\n        >\n          {images.map(img => (\n            <li\n              className=\"Carousel__item\"\n              key={getRandomId()}\n            >\n              <img\n                src={img}\n                width={itemWidth}\n                height={itemWidth}\n                alt={getImageNameFromUrl(img)}\n                className=\"Carousel__image\"\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"btn\"\n          onClick={handlePrev}\n          disabled={isDisabledPrev}\n        >\n          {' < '}\n        </button>\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          className=\"btn\"\n          onClick={handleNext}\n          disabled={isDisabledNext}\n        >\n          {' > '}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ntype DefaultValues = {\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nconst defaultValues: DefaultValues = {\n  itemWidth: 130,\n  frameSize: 3,\n  step: 3,\n  animationDuration: 1000,\n  infinite: false,\n};\n\ntype State = DefaultValues & {\n  images: string[];\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: defaultValues.step,\n    frameSize: defaultValues.frameSize,\n    itemWidth: defaultValues.itemWidth,\n    animationDuration: defaultValues.animationDuration,\n    infinite: defaultValues.infinite,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const name = event.target.name as keyof typeof this.state;\n\n    this.setState(\n      {\n        [name]: +(event.target.value),\n      } as unknown as Pick<State, keyof State>,\n    );\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy='title' >Carousel with {images.length} images</h1>\n\n        <form\n          method=\"POST\"\n          action=\"#\"\n          className=\"control-panel\"\n        >\n          <label htmlFor=\"itemId\" className=\"control-panel__line-block\">\n            Item Width:\n            <input\n              id=\"itemId\"\n              name=\"itemWidth\"\n              min=\"50\"\n              step=\"10\"\n              className=\"control-panel__input\"\n              value={itemWidth}\n              onChange={this.handleChange}\n              type=\"number\"\n            />\n          </label>\n\n          <label htmlFor=\"frameId\" className=\"control-panel__line-block\">\n            Frame Size:\n            <input\n              id=\"frameId\"\n              name=\"frameSize\"\n              min=\"1\"\n              max={images.length}\n              className=\"control-panel__input\"\n              value={frameSize}\n              onChange={this.handleChange}\n              type=\"number\"\n            />\n          </label>\n\n          <label htmlFor=\"stepId\" className=\"control-panel__line-block\">\n            Step:\n            <input\n              id=\"stepId\"\n              name=\"step\"\n              min=\"1\"\n              className=\"control-panel__input\"\n              value={step}\n              onChange={this.handleChange}\n              type=\"number\"\n            />\n          </label>\n\n          <label\n            htmlFor=\"animationDuration\"\n            className=\"control-panel__line-block\"\n          >\n            Animation Duration:\n            <input\n              id=\"animationDuration\"\n              name=\"animationDuration\"\n              min=\"100\"\n              step=\"100\"\n              className=\"control-panel__input\"\n              value={animationDuration}\n              onChange={this.handleChange}\n              type=\"number\"\n            />\n          </label>\n\n          <label htmlFor=\"infinite\">\n            * infinite\n            <input\n              id=\"infinite\"\n              name=\"infinite\"\n              checked={infinite}\n              onChange={() => this.setState({ infinite: !infinite })}\n              type=\"checkbox\"\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}